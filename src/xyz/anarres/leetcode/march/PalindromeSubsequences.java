package xyz.anarres.leetcode.march;

/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * Return the minimum number of steps to make the given string empty.
 * 
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * 
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 */
public class PalindromeSubsequences {

	public static void main(String[] args) {
		// tests
		PalindromeSubsequences palsub = new PalindromeSubsequences();
		String[] strs = new String[] {
				"ababa", "abb", "baabb", "", // "ababaabaaabbbbb"
		};
		for (String str:strs) {
			System.out.println(str + " is palindrome: " + palsub.isPalindrome(str));
			
			System.out.println(str + ": " + palsub.removePalindromeSub(str));
		}
	}

	private int removePalindromeSub(String s) {
		// s is empty > good to go
		if (s == null || s.isEmpty()) {
			return 0;
		}
		if (isPalindrome(s)) {
			// it's a pal already, go in 1 step
			return 1;
		}
		// otherwise remove all a to obtain subsequence with b, or the other way around
		return 2;
	}
	
	boolean isPalindrome(String str) {
		for (int i = 0; i < str.length()/2; i++) {
			if (str.charAt(i) != str.charAt(str.length() - 1 - i))
				return false;
		}
		return true;
	}
}

